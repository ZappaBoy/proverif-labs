(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2020                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
pred c/1 elimVar,decompData.
nounif c:x.

fun pk/1.
<<<<<<< Updated upstream
fun pencrypt/2.

fun sign/2.
=======
fun aencrypt/2.
fun sencrypt/2.
>>>>>>> Stashed changes

query c:secret[].

reduc
(* Initialization *)

c:c[];
c:pk(sA[]);
c:pk(sB[]); 						(*(1) il cancale conosce l'identit√† di B *)

(* The attacker *)

<<<<<<< Updated upstream
c:x & c:pencrypt(m,pk(x)) -> c:m;
c:x -> c:pk(x);
c:x & c:y -> c:pencrypt(x,y);
c:sign(x,y) -> c:x;
c:x & c:y -> c:sign(x,y);

(* The protocol *)
(* A *)
c:k[];
c:k[] & c:pk(x) -> c:pencrypt(k[], pk(x));

(* B *)
c:k[] & c:pk(x) & c:pencrypt(k[], pk(x)) -> c:pencrypt(secret[], pk(k)).
=======
c:x & c:aencrypt(m,pk(x)) -> c:m;
c:x & c:sencrypt(m,x) -> c:m; 		(*(4) l'attaccante riceve secret[] *)
c:x -> c:pk(x);
c:x & c:y -> c:aencrypt(x,y); 		(*(2) l'attaccante usa aencrypt(k, pk(sB[])) per inviare una chiave di cifratura fingendosi A *)

(* The protocol *)
(* A *)
c:k[] & c:pk(x) -> c:aencrypt(k[], pk(x));

(* B *)
c:aencrypt(k, pk(sB[])) -> c:sencrypt(secret[], k). (*(3) B riceve la chiave dall'attaccante e risponde con il secret[] cifrato *)
>>>>>>> Stashed changes

(* EXPECTPV
RESULT goal reachable: c:secret[]
*)
